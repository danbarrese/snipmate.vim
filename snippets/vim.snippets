## UBIQUITOUS SNIPPETS

# if ife start fn fore wh seq guard

## Access Modifiers {{{
#}}}
## Arrays {{{
#snippet ar
	declare -a ${1:ar}=(${2:1 2 3})
#snippet arlen
	${#${1:ar}[@]}
#snippet aradd
	${1:ar}[${#$1[@]}+1]=${2:whatever}
#snippet arrem
	unset ${${1:ar}[${2:0}]}
#}}}
## Classes {{{
#}}}
## Conditionals {{{
snippet if
	if ${1:condition}
		${2:"}
	endif
snippet ife
	if ${1:condition}
		${2:"}
	else
		${3:"}
	endif
#snippet ifei
	if [[ ${1:condition} ]]; then
		${3:#}
	elif [[ ${2:condition} ]]; then
		${4:#}
	else
		${5:#}
	fi
#snippet el
	else
		${1}
#snippet elif
	elif [[ ${1:condition} ]]; then
		${2:#statements}
#snippet case
	case ${1:${var}} in
		${2:pattern})
			${3};;
		"a"|"b") ;;
		*) ;;
	esac
#}}}
## Debugging {{{
#}}}
## Documentation {{{
#snippet dfile
	# Name: ${1:name}
	# Version: ${2:0.01}
	# Description: ${3:desc}
	# Author: Dan Barrese (danbarrese.com)
	# Date: `strftime("%B %d, %Y")`
	# Update Log:
	#   `strftime("%Y.%m.%d")` [$2][DRB] Initial version.
	# Sources/References:
	# - None
#snippet dfn
	# Description: ${1}
	# Date: `strftime("%B %d, %Y")`
	# Author: Dan Barrese (danbarrese.com)
#snippet rem
	# 
#snippet dv
	# 
#snippet pre
	# Preconditions:
	#     * 
#snippet post
	# Postconditions:
	#     * 
snippet start
	" Name: ${1:`expand('%:t')`}
	" Version: ${2:0.01}
	" Description: ${3:desc}
	" Author: ${4:`g:snips_author`}
	" Date: `strftime("%B %d, %Y")`
	# Update Log:
	#   `strftime("%Y.%m.%d")` [$2][DRB] Initial version.
	# Sources/References:
	# - None
	
#snippet todo
	# TODO: 
#snippet h1
	# ${1:HEADER} {{{
	${2}
	#}}}
#}}}
## Error Handling {{{
#snippet try
	cmd = "${1:command}"
	$cmd 2>/dev/null
	if (( $? == 0 )); then
		echo 'command was successful'
	else
		echo 'error'
	fi
#}}}
## Files {{{
#snippet filex text
	-e ${${1:path}}
#snippet filer text
	while read -r line; do
		${1:#}
	done < "${path}"
#snippet filew
	> ${${1:path}}
#snippet filea
	>> ${${1:path}}
#}}}
## Functions {{{
snippet fn
	function ${1:fun}(${2})
		${3:"}
	endfunction
#}}}
## Loops {{{
#snippet for
	for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
		${3:#statements}
	done
snippet fore
	for ${1:needle} in ${2:haystack}
		${3:"}
	endfor
#snippet foref
	shopt -s nullglob
	files=(${path}/*)
	for fname in ${files[@]}; do
		printf '%s\n' "${fname}"
	done
snippet wh
	while ${1:condition}
		${2:"}
	endw
#snippet until
	until [[ ${1:condition} ]]; do
		${2:#statements}
	done
#}}}
## Misc {{{
#snippet cli
	while getopts "w:a:" n; do
		case ${n} in
			w)
				echo ${OPTARG};;
			a)
				echo ${OPTARG};;
		esac
	done
#snippet slashdir
	${1:str}="${$1%/}/"
snippet cat
	. 
#}}}
## Numbers {{{
#snippet inc
	$((++${1:var}))
#snippet dec
	$((--${1:var}))
#}}}
## Operators {{{
#snippet and
	&& 
#snippet or
	|| 
#snippet gt
	> 
#snippet lt
	< 
#snippet gte
	>= 
#snippet lte
	<= 
#snippet eq
	== 
#snippet ne
	!= 
#}}}
## Printing {{{
#snippet p
	printf '%s\n' "${1}"
#}}}
## String {{{
# string lower case
#snippet slower
	${${1},,}
#snippet slen
	${#${1:str}}
#snippet scon
	${${1:str}} == *${2:contains}*
#snippet sstarts
	${${1:str}} == ${2:startswith}*
#snippet sends
	${${1:str}} == *${2:endswith}
#snippet chop
	${${1:str}%?}
snippet seq
	${1:str} == ${2:str2}
#snippet seqi
	"X${${1:str,,}}" == "X${${2:str2,,}}"
#snippet sempty
	${${1:str}} == ""
#}}}
## Variables {{{
#snippet v
	${${1}}
#snippet bo
	${1:boolvar}=${2:true}
#snippet s
	${1:str}="${2}"
#snippet i
	declare -i ${1:i}=0
#snippet n
	${1:i}=0
#snippet f
	${1:floatvar}=0.00
#snippet db
	${1:floatvar}=0.00
#snippet const
	readonly ${1:ro}=${2}
#}}}

## LANGUAGE SPECIFIC SNIPPETS {{{
snippet guard
	if exists('${1:did_`Filename()`}') || &cp${2: || version < 700}
		finish
	endif
	let $1 = 1${3}
#}}}
