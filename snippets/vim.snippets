# > VIM language agnostic snippets {{{
###############################################################################
snippet ei
	elseif ${1:condition}
	    ${2:"}
snippet el
	else
	    ${1:"}
snippet if
	if ${1:condition}
	    ${2:"}
	endif
snippet ife
	if ${1:condition}
	    ${2:"}
	else
	    ${3:"}
	endif
snippet ifei
	if ${1:condition}
	    ${3:"}
	elseif ${2:condition}
	    ${4:"}
	else
	    ${5:"}
snippet ifet
	${1:condition} ? ${2:true} : ${3:false}
snippet dstart
	" Name: ${1:`expand('%:t')`}
	" Version: ${2:0.01}
	" Description: ${3:desc}
	" Author: ${4:`g:snips_author`}
	" Date: `strftime("%B %d, %Y")`
	" Update Log:
	"   `strftime("%Y.%m.%d")` [$2][DRB] Initial version.
	" Sources/References:
	" - None
	
snippet dtodo
	" TODO: 
snippet fn
	function ${1:Fun}(${2})
	    ${3:"}
	endfunction
snippet fncall
	call ${1:Fun}(${2:args})
snippet for
	for s:i in range(${1:0, 4})
	    ${2:"}
	endfor
snippet fore
	for ${1:needle} in ${2:haystack}
	    ${3:"}
	endfor
snippet wh
	while ${1:condition}
	    ${2:"}
	endw
snippet cli
	NO
snippet env
	$${1:JAVA_HOME}
snippet ndivf
	${1:x} / ${2:y}
snippet nvalf
	str2float(${1})
snippet nvali
	str2nr(${1})
snippet and
	&& 
snippet e
	== 
snippet gt
	> 
snippet gte
	>= 
snippet lt
	< 
snippet lte
	<= 
snippet n
	. 
snippet ne
	!= 
snippet not
	! 
snippet or
	|| 
snippet p
	echo ${1}
snippet pf
	printf("%s", ${2:str})
snippet pp
	echo '${1}'
snippet rxm
	match(${1:regex}, ${2:str})
snippet rxs
	substitute(${1:str}, ${2:regex}, ${3:replacement}${4:, flags})
snippet rxsg
	substitute(${1:str}, ${2:regex}, ${3:replacement}, "g")
snippet se
	${1:str} == ${2:str2}
snippet sexe
	@@command
	exe ${1:str}
	@@expression
	eval(${1:str})
snippet sidx
	stridx(${1:str}, ${2:needle})
snippet sidxr
	strridx(${1:str}, ${2:needle})
snippet slen
	strlen(${1:str})
snippet slit
	${1:'don''t say "no"'}
snippet slower
	tolower(${1})
snippet supper
	toupper(${1})
snippet free
	unlet! ${1:foo}
snippet v
	@@scope: parameter of function
	a:${1:foo}
	@@scope: buffer
	b:${1:foo}
	@@scope: global
	g:${1:foo}
	@@scope: local (function)
	${1:foo}
	@@scope: script
	s:${1:foo}
	@@scope: tab
	t:${1:foo}
	@@scope: vim predefined
	v:${1:foo}
	@@scope: window
	w:${1:foo}
snippet vglobal
	let g:${1:foo} = ${2:val}
snippet vs
	let ${1:foo} = "${2:val}"
snippet vset
	@@scope: buffer
	let b:${1:foo} = ${2:val}
	@@scope: global
	let g:${1:foo} = ${2:val}
	@@scope: function
	let l:${1:foo} = ${2:val}
	@@scope: script
	let s:${1:foo} = ${2:val}
	@@scope: tab
	let t:${1:foo} = ${2:val}
	@@scope: window
	let w:${1:foo} = ${2:val}
snippet vx
	exists("${1:foo}")
#}}}
# > Vim custom snippets {{{
snippet guard
	if exists('${1:did_`Filename()`}') || &cp${2: || version < 700}
		finish
	endif
	let $1 = 1${3}
snippet nor
	normal 
#}}}
