# > JAVA language agnostic snippets {{{
###############################################################################
snippet and
	&& 
snippet ar
	${1:Object}[] arr = new $1[${2:10}];
snippet aradd
	// import java.util.Arrays;
	int origLength = ${1:origArray}.length;
	$1 = java.util.Arrays.copyOf($1, origLength + 1);
	$1[origLength] = ${2:newElement};
snippet arget
	${1:ar}[${2:0}]
snippet arlen
	${1:array}.length
snippet arlit
	new ${1:Type}[]{${2:commaSeparatedList}}
snippet arrem
	int origLength = ${1:origArray}.length;
	${2:Object}[] tempArr = new $2[origLength - 1];
	int idxToRemove = ${3:0};
	int j = 0;
	for (int i = 0; i < origLength; i++) {
		if (i != idxToRemove) {
			tempArr[j++] = $1[i];
		}
	}
	$1 = tempArr;
snippet arset
	${1:ar}[${2:0}] = ${3:value}
snippet bo
	boolean 
snippet br
	break;
snippet ccguard
	synchronized (LOCK_${1:FOOBAR}) {
		//
	}
snippet cclock
	@GuardedBy("LOCK_$1") ${2:private String foobar = "foobar"};
	final Object LOCK_${1:FOOBAR} = new Object();
snippet ccsleep
	Thread.sleep(${1:1000});
snippet cl
	class ${1:FooBarClass} {
		public $1(${2}) {
			//
		}
		@Override
		public int hashCode() {
			org.apache.commons.lang3.builder.HashCodeBuilder hashCodeBuilder;
			hashCodeBuilder = new org.apache.commons.lang3.builder.HashCodeBuilder(17, 31);
			// hashCodeBuilder.append(foobar);
			return hashCodeBuilder.toHashCode();
		}
		@Override
		public boolean equals(Object o) {
			if (o == this) return true;
			if (o instanceof this) return false; // Also checks for null.
			if (foobar1 != o.foobar1) {
				return false;
			} else if (foobar2 != o.foobar2) {
				return false;
			}
			return true;
		}
		@Override
		public String toString() {
			return ;
		}
	}
snippet d
	// 
snippet dcl
	/**
	 * ${1:description}
	 *
	 * @author `g:snips_author`
	 */
snippet decxml
	// solution uses JAXP and SAX included in Java API since version >= 1.5
	class ShoppingContentHandler extends DefaultHandler {
		Double priceSum = 0d;
		@Override
			public void startElement(String uri, String localName, String name,
					Attributes attributes) throws SAXException {
				if(name.equals("item")) {
					String quantityString = attributes.getValue(attributes.getIndex("quantity"));
					String priceString = attributes.getValue(attributes.getIndex("price"));
					Integer quantity = Integer.parseInt(quantityString);
					Double price = Double.parseDouble(priceString);
					priceSum += (quantity * price);
				}
			}
		public Double getPriceSum() {
			return priceSum;
		}
	}
	
	SAXParserFactory parserFactory = SAXParserFactory.newInstance();
	try {
		SAXParser parser = parserFactory.newSAXParser();
		XMLReader reader = parser.getXMLReader();
		ShoppingContentHandler contentHandler = new ShoppingContentHandler();
		reader.setContentHandler(contentHandler);
		reader.parse(new InputSource(new FileReader("shopping.xml")));
		System.out.printf("$%.2f", contentHandler.getPriceSum());
	
	} catch (ParserConfigurationException e) {
		e.printStackTrace();
	} catch (SAXException e) {
		e.printStackTrace();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
snippet dfile
	/**
	 * ${1:description}
	 *
	 * @author `g:snips_author`
	 */
snippet dfn
	/**
	 * ${1:description}
	 *
	 * @Preconditions
	 * <li></li>
	 *
	 * @Postconditions
	 * <li></li>
	 *
	 * @param
	 * @return
	 * @throws
	 * @author `g:snips_author`
	 */
snippet dowh
	do {
		${2://}
	} while (${1:condition});
snippet dpost
	@Postconditions:
	<li></li>
snippet dpre
	@Preconditions:
	<li></li>
snippet dstart
	/**
	 * Name: ${2:name}
	 * Version: ${3:0.01}
	 * Description: ${4:desc}
	 * Author: Dan Barrese (danbarrese.com)
	 * Date: `strftime("%B %d, %Y")`
	 * Update Log:
	 *   `strftime("%Y.%m.%d")` [$3][DRB] Initial version.
	 * Sources/References:
	 * - None
	 */
	public class ${1:`Filename("", "FooBarClass")`} {
		public static void main (String [] args) {
			//
		}
	}
snippet dtodo
	// TODO: 
snippet dv
	/** ${1} */
snippet e
	== 
snippet ei
	else if (${1:condition}) {
		${2://}
	}
snippet el
	else {
		${1://}
	}
snippet email
	// requires Java Mail API (mail.jar), which must be in classpath
	try {
		Properties props = System.getProperties();
		props.put("mail.smtp.host", "smtp.sampledomain.com");
		Session session = Session.getDefaultInstance(props, null);
		Message msg = new MimeMessage(session);
		msg.setFrom(new InternetAddress("gaylord.focker@hollywood.com"));
		msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse("father@family.com"));
		msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse("mother@family.com"));
		msg.setSubject("subject");
		msg.setText("message body");
		msg.setHeader("X-Mailer", "jAVAmAILER");
		msg.setSentDate(new Date());
		Transport.send(msg);
	} catch (AddressException e) {
		e.printStackTrace();
	} catch (MessagingException e) {
		e.printStackTrace();
	}
snippet en
	== null
snippet eo
	${1:obj1}.equals(${2:obj2})
snippet fa
	false
snippet fila
	fileWriter.append(${1:"\n" + "newline"});
snippet filr
	// import java.io.BufferedReader;
	// import java.io.File;
	// import java.io.FileInputStream;
	// import java.io.IOException;
	// import java.io.InputStreamReader;
	try {
		FileInputStream fis = new FileInputStream(${1:new File()});
		BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
		String line = reader.readLine();
		while (line != null) {
			${2://}
			line = reader.readLine();
		}
	} catch (IOException e) {
		// TODO: handle exception
	}
snippet filw
	// import java.io.File;
	// import java.io.FileWriter;
	// import java.io.IOException;
	try {
		FileWriter fileWriter = new FileWriter(${1:new File()});
		fileWriter.write(${2:"contents"});
		fileWriter.close();
	} catch (IOException e) {
		// TODO: handle exception
	}
snippet filx
	new File(${1:path}).exists()
snippet fn
	private void ${1:fun}(${2}) {
		${3://}
	}
snippet fnn
	${1:fun}(${2}) {
		${3://}
	}
snippet folx
	new File(${1:path}).exists()
snippet for
	for (int ${1:i} = ${2:0}; $1 < ${3:5}; $1++) {
		${4://}
	}
snippet fore
	for (${1:Type} ${2:elem} : ${3:coll}) {
		${4://}
	}
snippet free
	NO
snippet gt
	> 
snippet gte
	>= 
snippet h1
	// ${1} {{{
	//````````````````````````````````````````````````````````````````````````````` 
	//}}}
snippet if
	if (${1:condition}) {
		${2://}
	}
snippet ife
	if (${1:condition}) {
		${2://}
	} else {
		${3://}
	}
snippet ifei
	if (${1:condition}) {
		${3://}
	} else if (${2:condition}) {
		${4://}
	} else {
		${5://}
	}
snippet in
	import
snippet lazy
	if (${1:var} == null) {
		$1 = new ${2:Type}();
	}
	return $1;
snippet lt
	< 
snippet lte
	<= 
snippet ma
	abstract 
snippet mc
	final
snippet me
	-= 
snippet mp
	public 
snippet mr
	private 
snippet ms
	static 
snippet mt
	protected 
snippet ndec
	${1:i}--;
snippet ne
	!= 
snippet neo
	!${1:obj1}.equals(${2:obj2})
snippet ninc
	${1:i}++;
snippet nl
	null
snippet nme
	${1:i} -= ${2:2};
snippet nn
	!= null
snippet npe
	${1:i} += ${2:2};
snippet or
	|| 
snippet p
	System.out.println(${1:});
snippet pe
	+= 
snippet pp
	System.out.println("${1:}");
snippet re
	return 
snippet s
	String 
snippet scon
	${1:strVar}.contains(${2})
snippet se
	${1:strVar}.equals(${2})
snippet sei
	${1:strVar}.equalsIgnoreCase(${2})
snippet sempty
	(${1:strVar} == null || $1.trim().isEmpty())
snippet sends
	${1:strVar}.endsWith(${2})
snippet slen
	${1:strVar}.length()
snippet slower
	${1:strVar}.toLowerCase()
snippet sstarts
	${1:strVar}.startsWith(${2})
snippet supper
	${1:strVar}.toUpperCase()
snippet sval
	String.valueOf(${1:var})
snippet sw
	switch(${1:key}) {
		case ${2:value}:
			break;
		default:
			break;
	}
snippet tafter
	${1:d}.after(${2})
snippet tbefore
	${1:d}.before(${2})
snippet testfn
	@Test
	public void ${1:test}() throws Exception {
		${2:// TODO: Implement test.}
	}
snippet tnow
	// import java.util.Date
	new Date()
snippet tr
	true
snippet until
	do {
		${2://}
	} until (${1:condition});
snippet v
	EMPTY
snippet vb
	boolean ${1:b} = ${2:false};
snippet vc
	final ${1:String} ${2:FOO_BAR} = ${3};
snippet vch
	char ${1:c} = ${2:'a'};
snippet vcur
	NO
snippet vd
	double ${1:d} = ${2:1.0};
snippet vderef
	NO
snippet vf
	float ${1:f} = ${2:1.0};
snippet vi
	int ${1:i} = ${2:1};
snippet vistype
	instanceof ${1:String}
snippet vl
	long ${1:l} = ${2:1L};
snippet vn
	int ${1:i} = ${2:1};
snippet vo
	${1:Object} ${2:o} = new $1(${3});
snippet vref
	NO
snippet vs
	String ${1:s} = ${2:"foobar"};
snippet vsl
	single ${1:sl} = ${2:1};
snippet vswap
	// import java.util.Date
	Date ${1:d} = new Date();
snippet vt
	// import java.util.Date
	Date ${1:d} = new Date();
snippet vv
	${1:Object} ${2:o} = new $1();
snippet wh
	while (${1:condition}) {
		${2://}
	}
snippet xh
	try {
		${2://}
	} catch (${1:Exception} e) {
		// TODO: handle exception
	} finally {
	}
snippet xr
	throw new ${1:Exception}(${2});
#}}}
# > Java custom snippets {{{
snippet Bo
	Boolean 
snippet main
	public static void main (String [] args) {
		${1://}
	}
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet imp
	implements
snippet ext
	extends 
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet iface
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet vvvvv
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet guavacallback
	Futures.addCallback(${1}, new FutureCallback<${2}>() {
		public void onFailure(Throwable t) {
			${3}
		}
		public void onSuccess($2 o) {
			${4}
		}
	});
#}}}
