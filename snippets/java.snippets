## UBIQUITOUS SNIPPETS

# mp mr ms mt mc ma aradd arlen arrem cl case el ei if ife ifei map deref istype ref now tafter tbefore dcl dfile dfn dv h1 post pre rem start todo try fn fnn nl s i bo re br for fore until wh dowh in lock guard inc dec npe nme and e eo gt gte lt lte or ne neo pe me p pp scon sempty sends seq seqi slen slower sstarts supper sval nn en v va vb vc vch vd vf vg vi vl vn vo vs vsl vt vv Bo main de ca th sy imp ext j.u j.i j.b j.n j.m tc t iface m vvvvv co cos as

## Access Modifiers {{{
snippet mp
	public 
snippet mr
	private 
snippet ms
	static 
snippet mt
	protected 
snippet mc
	final
snippet ma
	abstract
# }}}
## Arrays {{{
snippet aradd
	// import java.util.Arrays;
	int origLength = ${1:origArray}.length;
	$1 = java.util.Arrays.copyOf($1, origLength + 1);
	$1[origLength] = ${2:newElement};
snippet arlen
	${1:array}.length
snippet arrem
	int origLength = ${1:origArray}.length;
	${2:Object}[] tempArr = new $2[origLength - 1];
	int idxToRemove = ${3:0};
	int j = 0;
	for (int i = 0; i < origLength; i++) {
		if (i != idxToRemove) {
			tempArr[j++] = $1[i];
		}
	}
	$1 = tempArr;
# }}}
## Classes {{{
snippet cl
	class ${1:FooBarClass} {

		public $1(${2}) {
			//
		}

		@Override
		public int hashCode() {
			org.apache.commons.lang3.builder.HashCodeBuilder hashCodeBuilder;
			hashCodeBuilder = new org.apache.commons.lang3.builder.HashCodeBuilder(17, 31);
			// hashCodeBuilder.append(foobar);
			return hashCodeBuilder.toHashCode();
		}

		@Override
		public boolean equals(Object o) {
			if (o == this) return true;
			if (o instanceof this) return false; // Also checks for null.
			if (foobar1 != o.foobar1) {
				return false;
			} else if (foobar2 != o.foobar2) {
				return false;
			}
			return true;
		}

		@Override
		public String toString() {
			return ;
		}

	}
# }}}
## Conditionals {{{
snippet case
	switch(${1:key}) {
		case ${2:value}:
			break;
		default:
			break;
	}
snippet el
	else {
		${1://}
	}
snippet ei
	else if (${1:condition}) {
		${2://}
	}
snippet if
	if (${1:condition}) {
		${2://}
	}
snippet ife
	if (${1:condition}) {
		${2://}
	} else {
		${3://}
	}
snippet ifei
	if (${1:condition}) {
		${3://}
	} else if (${2:condition}) {
		${4://}
	} else {
		${5://}
	}
# }}}
## Data Structure {{{
snippet map
	Map<${1:Object}, ${2:Object}> m = new HashMap<>();
# }}}
## Data Type {{{
snippet istype
	instanceof ${1:String}
# }}}
## Date Time {{{
snippet now
	new Date()
snippet tafter
	${1:d}.after(${2})
snippet tbefore
	${1:d}.before(${2})
#snippet tomorrow
#snippet yesterday
# }}}
## Debugging {{{
# }}}
## Documentation {{{
snippet dcl
	/**
	 * ${1:description}
	 *
	 * @author `g:snips_author`
	 */
snippet dfile
	/**
	 * ${1:description}
	 *
	 * @author `g:snips_author`
	 */
snippet dfn
	/**
	 * ${1:description}
	 *
	 * @Preconditions
	 * <li></li>
	 *
	 * @Postconditions
	 * <li></li>
	 *
	 * @param
	 * @return
	 * @throws
	 * @author `g:snips_author`
	 */
snippet dv
	/** ${1} */
snippet h1
	// ${1} {{{
	//`````````````````````````````````````````````````````````````````````````````
# }}}
snippet post
	@Postconditions:
	<li></li>
snippet pre
	@Preconditions:
	<li></li>
snippet rem
	// 
#  TODO: capitalize first letter of filename, if filename exists.
snippet start
	public class ${1:`Filename("", "FooBarClass")`} {
		public static void main (String [] args) {
			//
		}
	}
snippet todo
	// TODO: 
# }}}
## Error Handling {{{
snippet try
	try {
		//
	} catch (${1:Exception} e) {
		// TODO: handle exception
	}
# }}}
## File {{{
snippet fila text
	fileWriter.append(${1:"\n" + "newline"});
snippet filr text
	// import java.io.BufferedReader;
	// import java.io.File;
	// import java.io.FileInputStream;
	// import java.io.IOException;
	// import java.io.InputStreamReader;
	try {
		FileInputStream fis = new FileInputStream(${1:new File()});
		BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
		String line = reader.readLine();
		while (line != null) {
			${2://}
			line = reader.readLine();
		}
	} catch (IOException e) {
		// TODO: handle exception
	}
snippet filw
	// import java.io.File;
	// import java.io.FileWriter;
	// import java.io.IOException;
	try {
		FileWriter fileWriter = new FileWriter(${1:new File()});
		fileWriter.write(${2:"contents"});
		fileWriter.close();
	} catch (IOException e) {
		// TODO: handle exception
	}
snippet filx
	new File(${1:path}).exists()
snippet folx
	new File(${1:path}).exists()
# }}}
## Functions {{{
snippet fn
	private void ${1:fun}(${2}) {
		${3://}
	}
snippet fnn
	${1:fun}(${2}) {
		${3://}
	}
# }}}
## Keyword {{{
snippet nl
	null
snippet s
	String 
snippet i
	Integer 
snippet bo
	boolean 
snippet re
	return
# }}}
## Loops {{{
snippet br
	break;
snippet for
	for (int ${1:i} = ${2:0}; $1 < ${3:5}; $1++) {
		${4://}
	}
snippet fore
	for (${1:Type} ${2:elem} : ${3:coll}) {
		${4://}
	}
#snippet foref
snippet until
	do {
		${2://}
	} until (${1:condition});
snippet wh
	while (${1:condition}) {
	}
snippet dowh
	do {
		${2://}
	} while (${1:condition});
# }}}
## Misc {{{
#snippet cli
#snippet uname
snippet in
	import
# }}}
## Multithreading {{{
snippet lock
	@GuardedBy("LOCK_$1") ${2:private String foobar = "foobar"};
	final Object LOCK_${1:FOOBAR} = new Object();
snippet guard
	synchronized (LOCK_${1:FOOBAR}) {
		//
	}
# }}}
## Numbers {{{
snippet inc
	${1:i}++;
snippet dec
	${1:i}--;
snippet npe
	${1:i} += ${2:2};
snippet nme
	${1:i} -= ${2:2};
# }}}
## Operators {{{
snippet and
	&& 
snippet e
	== 
snippet eo
	${1:obj1}.equals(${2:obj2})
snippet gt
	> 
snippet gte
	>= 
snippet lt
	< 
snippet lte
	<= 
snippet or
	|| 
snippet ne
	!= 
snippet neo
	!${1:obj1}.equals(${2:obj2})
snippet pe
	+= 
snippet me
	-= 
# }}}
## Printing {{{
snippet p
	System.out.println(${1:});
snippet pp
	System.out.println("${1:}");
# }}}
## String {{{
#snippet chop
snippet scon
	${1:strVar}.contains(${2})
snippet sempty
	(${1:strVar} == null || $1.trim().isEmpty())
snippet sends
	${1:strVar}.endsWith(${2})
snippet seq
	${1:strVar}.equals(${2})
snippet seqi
	${1:strVar}.equalsIgnoreCase(${2})
#snippet slashdir
snippet slen
	${1:strVar}.length()
snippet slower
	${1:strVar}.toLowerCase()
snippet sstarts
	${1:strVar}.startsWith(${2})
#snippet ssub
snippet supper
	${1:strVar}.toUpperCase()
snippet sval
	String.valueOf(${1:var})
# }}}
## Var Actions {{{
snippet nn
	!= null
snippet en
	== null
# }}}
## Variables {{{
snippet v
	
snippet va
	${1:Object}[] arr = new $1[${2:10}];
snippet vb
	boolean ${1:b} = ${2:false};
snippet vc
	final ${1:String} ${2:FOO_BAR} = ${3};
snippet vch
	char ${1:c} = ${2:'a'};
#snippet vcur
snippet vd
	double ${1:d} = ${2:1.0};
snippet vf
	float ${1:f} = ${2:1.0};
snippet vg
	Object o = ${1};
snippet vi
	int ${1:i} = ${2:1};
snippet vl
	long ${1:l} = ${2:1L};
snippet vn
	int ${1:i} = ${2:1};
# TODO: make object name same as class but lowercase first letter.
snippet vo
	${1:Object} ${2:o} = new $1();
snippet vs
	String ${1:s} = ${2:"foobar"};
snippet vsl
	single ${1:sl} = ${2:1};
snippet vt
	Date ${1:d} = new Date();
snippet vv
	${1:Object} ${2:o} = new $1();
# }}}

## SPECIFIC SNIPPETS {{{
snippet Bo
	Boolean 
snippet main
	public static void main (String [] args) {
		${1://}
	}
# }}}

snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet imp
	implements
snippet ext
	extends 
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet iface
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet vvvvv
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
