# > VBS language agnostic snippets {{{
###############################################################################
snippet and
	And 
snippet ar
	xDim ${1:ar}(${2})
snippet aradd
	ReDim Preserve ${1:ar}[UBound($1) + 1]
	$1(UBound($1)) = ${2:foo}
snippet arlen
	UBound(${${1:ar}})
snippet arrem
	Dim ${1:iRemoveIndex}: $1 = ${2:0}
	Dim i
	For i = $1 To UBound(${3:array}) - 1
		$3(i) = $3(i + 1)
	Next
	ReDim Preserve $3(UBound($3) - 1)
snippet br
	$${for}Exit For
	$${do}Exit Do
snippet cl
	Class ${1:foo} '{{{
		Private Sub Class_Initialize() '{{{
			Reset
		End Sub '}}}
		
		Private Sub Class_Terminate() '{{{
			'
		End Sub '}}}
		
		Public Sub Reset() '{{{
			'
		End Sub '}}}
	'}}}
snippet d
	' 
snippet dfile
	' Name: ${1:name}
	' Version: ${2:0.01}
	' Description: ${3:desc}
	' Author: Dan Barrese (danbarrese.com)
	' Date: `strftime("%B %d, %Y")`
	' Update Log: {{{
	'   `strftime("%Y.%m.%d")` [$2][DRB] Initial version.
	' }}}
	' Sources/References:
	' - None
snippet dfn
	' {{{ ${$1:description}
	' PARAMS:	?
	' RETURNS:   ?
	' AUTHOR:	Dan Barrese
	' DATE:	  `strftime("%B %d, %Y")`
	'---------------------------------------------------------------------------}}}
snippet dpost
	' Postconditions:
	'	 * 
snippet dpre
	' Preconditions:
	'	 * 
snippet dsm
	Dim d_${1}:Set d_$1 = CreateObject("Scripting.Dictionary")
snippet dstart
	' Option Explicit
	' Name: ${1:name}
	' Version: ${2:0.01}
	' Description: ${3:desc}
	' Author: Dan Barrese (danbarrese.com)
	' Date: `strftime("%B %d, %Y")`
	' Update Log:
	'   `strftime("%Y.%m.%d")` [$2][DRB] Initial version.
	' Sources/References:
	' - None
snippet dtodo
	' TODO: 
snippet dv
	' 
snippet e
	= 
snippet ei
	ElseIf ${1:condition} Then
		${2:'}
snippet el
	Else
		${1:'}
snippet fila
	${1:textFile}.Write(${2:str})
snippet filw
	Dim ${1:textFile}:Set $1 = oFSO.OpenTextFile(${2:path}, 2, True)
	$1.Write(${3:str})
	$1.Close
snippet filx
	Dim o_fso: Set o_fso = CreateObject("Scripting.FileSystemObject")
	Dim b_fileExists: b_fileExists = o_fso.FileExists(${1:path})
	If b_fileExists Then
		${2:'}
	End If
	while read -r line; do
		${1:'}
	done < "${path}"
snippet fn
	Function ${1:fun}(${2}) '{{{
		${3:'}
	End Function '}}}
snippet fnpref
	ByRef 
snippet fnpval
	ByVal 
snippet folx
	Dim o_fso: Set o_fso = CreateObject("Scripting.FileSystemObject")
	Dim b_folderExists: b_folderExists = o_fso.FolderExists(${1:path})
	If b_folderExists Then
		${2:'}
	End If
snippet for
	For ${1:i} = ${2:0} To ${3:i_count}
		${4:'}
	Next
snippet fore
	For Each ${1:var} In ${2:coll}
		${3:'}
	Next
snippet gt
	> 
snippet gte
	>= 
snippet h1
	' > ${1:HEADER} {{{
	'``````````````````````````````````````````````````````````````````````````````
	${2}
	'}}}
snippet if
	If ${1:condition} Then
		${2:'}
	End If
snippet ife
	If ${1:condition} Then
		${2:'}
	Else
		${3:'}
	End If
snippet ifei
	If ${1:condition} Then
		${3:'}
	ElseIf ${2:condition} Then
		${4:'}
	Else
		${5:'}
	End If
snippet lt
	< 
snippet lte
	<= 
snippet ma
	NO
snippet mc
	const 
snippet mp
	Public 
snippet mr
	Private 
snippet ms
	NO
snippet mt
	NO
snippet ndec
	${1:var} = $1 - 1
snippet ne
	<> 
snippet ninc
	${1:var} = $1 + 1
snippet nl
	vbNull
snippet nn
	Not isEmpty(${1:var})
snippet or
	Or 
snippet p
	WScript.Echo ${1}
snippet pp
	WScript.Echo "${1}"
snippet re
	${1:functionName} = 
snippet scon
	(InStr(""&CStr(${1:str}), ""&CStr(${2:contains})) <> 0)
snippet se
	${1:str} = ${2:str2}
snippet sei
	LCase(${1:str}) = LCase(${2:str2})
snippet sempty
	${1:str} = vbNullString
snippet sends
	(InStrRev(""&CStr(${1:str}), ""&CStr(${2:contains})) <> 0)
snippet slen
	Len(${1:str})
snippet slower
	LCase(${1})
snippet sstarts
	(InStr(""&CStr(${1:str}), ""&CStr(${2:contains})) = 1)
snippet supper
	UCase(${1})
snippet sval
	CStr(${1:var})
snippet sw
	Select Case ${1:foo}
		Case 0
			'
		Case 1
			'
		Case 2
			'
		Case Else
			'
	End Select
snippet tnow
	Now
snippet uname
	Dim o_network: Set o_network = CreateObject("Wscript.Network")
	Dim s_username: s_username = o_network.UserName
snippet until
	Do Until ${1:condition}
		${2:'}
	Loop 
snippet v
	EMPTY
snippet vb
	xDim b_${1}: b_$1 = ${2:True}
snippet vc
	xConst ${1:foo} = ${2}
snippet vch
	xDim ch_${1}: ch_$1 = "${2}"
snippet vcur
	xDim cur_${1}: cur_$1 = '${2}'
snippet vd
	xDim d_${1}: d_$1 = ${2:0.0}
snippet vf
	Dim d_${1}: d_$1 = ${2:0.0}
snippet vi
	xDim i_${1}: i_$1 = ${2:0}
snippet vl
	xDim l_${1}: l_$1 = ${2:0}
snippet vn
	xDim n_${1}: n_$1 = ${2:0}
snippet vo
	xDim o_${1}:Set o_$1 = New $1
snippet vs
	xDim s_${1}: s_$1 = "${2}"
snippet vsl
	xDim sl_${1}: sl_$1 = ${2:0.0}
snippet vt
	xDim t_${1}: t_$1 = ${2:Now}
snippet vv
	xDim ${1}
snippet wh
	Do While ${1:condition}
		${2:'}
	Loop
snippet xh
	On Error Resume Next
	${1:'statements}
	If Err Then
		'Err.Description
		'Err.Clear
	End If
	On Error GoTo 0
#}}}
# > VBScript custom snippets {{{
snippet nls
	vbNullString
snippet sub
	Sub ${1:foo}() '{{{
		'
	End Sub '}}}
#}}}
